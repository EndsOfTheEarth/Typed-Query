
/*
 * 
 * Copyright (C) 2009-2016 JFo.nz
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 **/
 
using System;
using System.Collections.Generic;
using System.Text;

namespace Sql.Database {
	
	public class DbTable {

		private readonly string mName;
		private readonly string mSchemaName;
		private readonly IList<DbColumn> mColumns;

		public DbTable(string pName, string pSchemaName, IList<DbColumn> pColumns) {
			
			if (string.IsNullOrEmpty(pName))
				throw new Exception("pName cannot be null or empty");

			if (pColumns == null)
				throw new NullReferenceException("pColumns cannot be null");

			mName = pName;
			mSchemaName = !string.IsNullOrEmpty(pSchemaName) ? pSchemaName : string.Empty;
			mColumns = pColumns;
		}
		public string Name {
			get { return mName; }
		}
		public string SchemaName {
			get { return mSchemaName; }
		}
		public IList<DbColumn> Columns {
			get { return mColumns; }
		}
	}

	public class DbColumn {

		private readonly string mName;
		private readonly System.Data.DbType mDbType;
		private readonly bool mNullable;
		private bool mIsPrimaryKey;
		private bool mIsAutoGenerated;
		private readonly bool mIsView;
		private string mForeignKeyToTable;

		public DbColumn(string pName, System.Data.DbType pDbType, bool pNullable, bool pIsPrimaryKey, bool pIsAutoGenerated, bool pIsView) {
			mName = pName;
			mDbType = pDbType;
			mNullable = pNullable;
			mIsPrimaryKey = pIsPrimaryKey;
			mIsAutoGenerated = pIsAutoGenerated;
			mIsView = pIsView;
		}

		public string Name {
			get { return mName; }
		}
		public System.Data.DbType DbType {
			get { return mDbType; }
		}
		public bool Nullable {
			get { return mNullable; }
		}
		public bool IsPrimaryKey {
			get { return mIsPrimaryKey; }
			internal set { mIsPrimaryKey = value; }
		}
		public string ForeignKeyToTable {
			get { return mForeignKeyToTable; }
			internal set { mForeignKeyToTable = value; }
		}
		public bool IsAutoGenerated {
			get { return mIsAutoGenerated; }
			internal set { mIsAutoGenerated = value; }
		}
		public bool IsView {
			get { return mIsView; }
		}
	}
}