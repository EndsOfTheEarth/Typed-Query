
/*
 * 
 * Copyright (C) 2009-2015 JFo.nz
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 **/

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;

namespace TypedQuery.Logic {
	
	public static class CodeGenerator {

		public static string GenerateTableAndRowCode(ITableDetails pTableDetails, ref string pColumnPrefix, bool pIncludeSchema, bool pGuessPrefix, bool pGenerateComments, bool pRemoveUnderscores) {

			if(pTableDetails == null)
				return "Unable to load table details";
			
			if(pGuessPrefix && pTableDetails.Columns.Count > 1) {

				bool stop = false;

				int charIndex = 0;

				string prefix = string.Empty;

				while(!stop) {

					char? c = null;

					for(int index = 0; index < pTableDetails.Columns.Count; index++) {

						IColumn column = pTableDetails.Columns[index];

						if(charIndex >= column.ColumnName.Length - 1) {
							stop = true;
							break;
						}
						
						if(index == 0) {
							c = column.ColumnName[charIndex];
						}
						else if(char.ToLower(c.Value) != char.ToLower(column.ColumnName[charIndex])) {
							stop = true;
							break;
						}
					}

					if(!stop && c != null) {
						prefix += c.Value;
						charIndex++;
					}
					else
						break; //Just incase
				}

				if(prefix.Length > 1 && prefix.Length < 6)
					pColumnPrefix = prefix;
			}

			string endl = Environment.NewLine;
			string tab = "\t";

			StringBuilder code = new StringBuilder();

			code.Append("using System;").Append(endl);
			code.Append("using System.Collections.Generic;").Append(endl).Append(endl);

			code.Append("namespace Tables.").Append(pTableDetails.TableName).Append(" {").Append(endl);
			code.Append(endl);

			if(pGenerateComments) {				
				code.Append(tab).Append("[Sql.TableAttribute(\"").Append(pTableDetails.Description).Append("\")]").Append(endl);
			}

			code.Append(tab).Append("public sealed class Table : ").Append(typeof(Sql.ATable).ToString()).Append(" {").Append(endl);
			code.Append(endl);
			code.Append(tab).Append(tab).Append("public static readonly Table Instance = new Table();").Append(endl);
			code.Append(endl);

			for(int columnIndex = 0; columnIndex < pTableDetails.Columns.Count; columnIndex++) {

				IColumn column = pTableDetails.Columns[columnIndex];

				if(pGenerateComments) {

					if(columnIndex > 0)
						code.Append(endl);

					code.Append(tab).Append(tab).Append("[Sql.ColumnAttribute(\"").Append(column.Description).Append("\")]").Append(endl);
				}
				code.Append(tab).Append(tab).Append("public ").Append(GetColumnType(column, pTableDetails)).Append(" ").Append(FormatName(GetColumnName(column, pColumnPrefix, pRemoveUnderscores))).Append(" { get; private set; }").Append(endl);
			}

			code.Append(endl);
			code.Append(tab).Append(tab).Append("public Table() : base(DATABASE, \"").Append(pTableDetails.TableName).Append("\", \"").Append(pIncludeSchema ? pTableDetails.Schema : string.Empty).Append("\", ").Append(pTableDetails.IsView ? "true" : "false").Append(", typeof(Row)) {").Append(endl);
			code.Append(endl);

			for(int columnIndex = 0; columnIndex < pTableDetails.Columns.Count; columnIndex++) {
				
				IColumn column = pTableDetails.Columns[columnIndex];
				string primaryKey = column.IsPrimaryKey ? "true" : "false";
				string isAutoGenerated = column.IsAutoGenerated ? "true" : "false";

				code.Append(tab).Append(tab).Append(tab).Append(FormatName(GetColumnName(column, pColumnPrefix, pRemoveUnderscores))).Append(" = new ").Append(GetColumnType(column, pTableDetails)).Append("(this, \"").Append(column.ColumnName).Append("\", ").Append(primaryKey);

				if(column.IsAutoGenerated) {
					code.Append(", ").Append(isAutoGenerated);
				}

				if(column.MaxLength != null && column.DbType != System.Data.DbType.Binary) {
					if(column.MaxLength == -1) {
						code.Append(", int.MaxValue");
					}
					else {
						code.Append(", " + column.MaxLength.Value.ToString());
					}
				}
				code.Append(");").Append(endl);
			}

			code.Append(endl);

			code.Append(tab).Append(tab).Append(tab).Append("AddColumns(");

			for(int columnIndex = 0; columnIndex < pTableDetails.Columns.Count; columnIndex++) {
				IColumn column = pTableDetails.Columns[columnIndex];
				if(columnIndex > 0)
					code.Append(", ");
				code.Append(FormatName(GetColumnName(column, pColumnPrefix, pRemoveUnderscores)));
			}

			code.Append(");").Append(endl);
			code.Append(tab).Append(tab).Append("}").Append(endl);
			code.Append(endl);

			code.Append(tab).Append(tab).Append("public Row this[int pIndex, Sql.IResult pResult] {").Append(endl);
			code.Append(tab).Append(tab).Append(tab).Append("get { return (Row)pResult.GetRow(this, pIndex); }").Append(endl);
			code.Append(tab).Append(tab).Append("}").Append(endl);
			code.Append(tab).Append("}").Append(endl);

			code.Append(endl);

			//
			//	Generate row code
			//
			code.Append(tab).Append("public sealed class Row : ").Append(typeof(Sql.ARow).ToString()).Append(" {").Append(endl);
			code.Append(endl);
			code.Append(tab).Append(tab).Append("private new Table Tbl {").Append(endl);
			code.Append(tab).Append(tab).Append(tab).Append("get { return (Table)base.Tbl; }").Append(endl);
			code.Append(tab).Append(tab).Append("}").Append(endl);
			code.Append(endl);
			code.Append(tab).Append(tab).Append("public Row() : base(Table.Instance) {").Append(endl);
			code.Append(tab).Append(tab).Append("}").Append(endl);
			code.Append(endl);

			for(int columnIndex = 0; columnIndex < pTableDetails.Columns.Count; columnIndex++) {
				
				IColumn column = pTableDetails.Columns[columnIndex];

				string columnName = FormatName(GetColumnName(column, pColumnPrefix, pRemoveUnderscores));

				if(columnIndex > 0)
					code.Append(endl);

				code.Append(tab).Append(tab).Append("public ").Append(GetReturnType(column.DbType, column.IsNullable)).Append(" ").Append(columnName).Append(" {").Append(endl);
				code.Append(tab).Append(tab).Append(tab).Append("get { return Tbl.").Append(columnName).Append(".ValueOf(this); }").Append(endl);

				if(!column.IsAutoGenerated && !pTableDetails.IsView)
					code.Append(tab).Append(tab).Append(tab).Append("set { Tbl.").Append(columnName).Append(".SetValue(this, value); }").Append(endl);

				code.Append(tab).Append(tab).Append("}").Append(endl);
			}
			code.Append(tab).Append("}").Append(endl);
			code.Append("}");

			return code.ToString();
		}

		public static string GenerateClassCode(ITableDetails pTableDetails, string pColumnPrefix, bool pRemoveUnderscores) {

			string endl = Environment.NewLine;
			string tab = "\t";

			string className = FormatName(pTableDetails.TableName);

			StringBuilder code = new StringBuilder();

			code.Append("using System;").Append(endl);
			code.Append(endl);

			code.Append("namespace Tables.").Append(pTableDetails.TableName).Append(" {").Append(endl);
			code.Append(endl);

			code.Append(tab).Append("public class ").Append(className).Append(" {").Append(endl);
			code.Append(endl);

			for(int columnIndex = 0; columnIndex < pTableDetails.Columns.Count; columnIndex++) {

				IColumn column = pTableDetails.Columns[columnIndex];

				code.Append(tab).Append(tab).Append("public ").Append(GetReturnType(column.DbType, column.IsNullable)).Append(" ").Append(FormatName(GetColumnName(column, pColumnPrefix, pRemoveUnderscores))).Append(" { get;");

				if(!column.IsAutoGenerated && !pTableDetails.IsView)
					code.Append(" set; }");
				else
					code.Append(" private set; }");

				code.Append(endl);
			}

			code.Append(endl);

			code.Append(tab).Append(tab).Append("public ").Append(className).Append("(Row pRow) {").Append(endl);
			code.Append(endl);

			for(int columnIndex = 0; columnIndex < pTableDetails.Columns.Count; columnIndex++) {

				IColumn column = pTableDetails.Columns[columnIndex];
				string fieldName = FormatName(GetColumnName(column, pColumnPrefix, pRemoveUnderscores));

				code.Append(tab).Append(tab).Append(tab).Append(fieldName).Append(" = pRow.").Append(fieldName).Append(";").Append(endl);
			}

			code.Append(tab).Append(tab).Append("}").Append(endl);

			code.Append(tab).Append(tab).Append("public void CopyToRow(Row pRow) {").Append(endl);
			code.Append(endl);

			for(int columnIndex = 0; columnIndex < pTableDetails.Columns.Count; columnIndex++) {

				IColumn column = pTableDetails.Columns[columnIndex];
				string fieldName = FormatName(GetColumnName(column, pColumnPrefix, pRemoveUnderscores));

				if(!column.IsAutoGenerated && !pTableDetails.IsView) {
					code.Append(tab).Append(tab).Append(tab).Append("pRow.").Append(fieldName).Append(" = ").Append(fieldName).Append(";").Append(endl);
				}
			}

			code.Append(tab).Append(tab).Append("}").Append(endl);

			code.Append(tab).Append("}").Append(endl);
			code.Append("}");

			return code.ToString();
		}

		private static string GetColumnName(IColumn pColumn, string pColumnPrefix, bool pRemoveUnderscores) {

			string value;

			if(!string.IsNullOrEmpty(pColumnPrefix) && pColumn.ColumnName.ToLower().StartsWith(pColumnPrefix.ToLower()))
				value = pColumn.ColumnName.Substring(pColumnPrefix.Length);
			else
				value = pColumn.ColumnName;

            StringBuilder name = new StringBuilder();

            if (pRemoveUnderscores) {

                bool upperCaseNextChar = true;

                for (int index = 0; index < value.Length; index++) {

                    char c = value[index];

                    if (c == '_') {
                        upperCaseNextChar = true;
                    }
                    else {
                        if (upperCaseNextChar) {
                            name.Append(Char.ToUpper(c));
                            upperCaseNextChar = false;
                        }
                        else {
                            name.Append(c);
                        }
                    }
                }
            }
			return name.ToString();
		}

		private static string FormatName(string pString) {

			StringBuilder str = new StringBuilder();

			for(int index = 0; index < pString.Length; index++) {

				char c = pString[index];

				if(index == 0 || (index > 0 && pString[index - 1] == '_')) {
					str.Append((string.Empty + c).ToUpper());
				}
				else
					str.Append(c);
			}
			return str.ToString();
		}

		private static string GetColumnType(IColumn pColumn, ITableDetails pTable) {

			string value;

			List<KeyColumn> matchingKeyColumns = new List<KeyColumn>();

			foreach(IForeignKey foreignKey in pTable.ForeignKeys) {

				foreach(KeyColumn keyColumn in foreignKey.KeyColumns) {
					if(keyColumn.ForeignKeyColumn == pColumn)
						matchingKeyColumns.Add(keyColumn);
				}
			}

			if(pColumn.DbType == System.Data.DbType.Boolean) {
				value = !pColumn.IsNullable ? typeof(Sql.Column.BoolColumn).ToString() : typeof(Sql.Column.NBoolColumn).ToString();
			}
			else if(pColumn.DbType == System.Data.DbType.DateTime) {
				value = !pColumn.IsNullable ? typeof(Sql.Column.DateTimeColumn).ToString() : typeof(Sql.Column.NDateTimeColumn).ToString();
			}
			else if(pColumn.DbType == System.Data.DbType.DateTime2) {
				value = !pColumn.IsNullable ? typeof(Sql.Column.DateTime2Column).ToString() : typeof(Sql.Column.NDateTime2Column).ToString();
			}
			else if(pColumn.DbType == System.Data.DbType.DateTimeOffset) {
				value = !pColumn.IsNullable ? typeof(Sql.Column.DateTimeOffsetColumn).ToString() : typeof(Sql.Column.NDateTimeOffsetColumn).ToString();
			}
			else if(pColumn.DbType == System.Data.DbType.Decimal) {
				value = !pColumn.IsNullable ? typeof(Sql.Column.DecimalColumn).ToString() : typeof(Sql.Column.NDecimalColumn).ToString();
			}
			else if(pColumn.DbType == System.Data.DbType.Guid) {

				if(matchingKeyColumns.Count > 0) {
					if(matchingKeyColumns.Count == 1)
						value = (!pColumn.IsNullable ? "Sql.Column.GuidKeyColumn" : "Sql.Column.NGuidKeyColumn") + "<" + matchingKeyColumns[0].PrimaryKeyTableName + ".Table>";
					else
						value = (!pColumn.IsNullable ? "Sql.Column.GuidKeyColumn" : "Sql.Column.NGuidKeyColumn") + "<" + matchingKeyColumns[0].PrimaryKeyTableName + "<??? Column Belongs to multipule foreign keys ???>.Table>";
				}
				else if(pColumn.IsPrimaryKey)
					value = (!pColumn.IsNullable ? "Sql.Column.GuidKeyColumn" : "Sql.Column.NGuidKeyColumn") + "<" + pTable.TableName + ".Table>";
				else
					value = !pColumn.IsNullable ? typeof(Sql.Column.GuidColumn).ToString() : typeof(Sql.Column.NGuidColumn).ToString();
			}
			else if(pColumn.DbType == System.Data.DbType.Int16) {

				if(matchingKeyColumns.Count > 0) {
					if(matchingKeyColumns.Count == 1)
						value = (!pColumn.IsNullable ? "Sql.Column.SmallIntegerKeyColumn" : "Sql.Column.NSmallIntegerKeyColumn") + "<" + matchingKeyColumns[0].PrimaryKeyTableName + ".Table>";
					else
						value = (!pColumn.IsNullable ? "Sql.Column.SmallIntegerKeyColumn" : "Sql.Column.NSmallIntegerKeyColumn") + "<" + matchingKeyColumns[0].PrimaryKeyTableName + "<??? Column Belongs to multipule foreign keys ???>.Table>";
				}
				else if(pColumn.IsPrimaryKey)
					value = (!pColumn.IsNullable ? "Sql.Column.SmallIntegerKeyColumn" : "Sql.Column.NSmallIntegerKeyColumn") + "<" + pTable.TableName + ".Table>";
				else
					value = !pColumn.IsNullable ? typeof(Sql.Column.SmallIntegerColumn).ToString() : typeof(Sql.Column.NSmallIntegerColumn).ToString();
			}
			else if(pColumn.DbType == System.Data.DbType.Int32) {

				if(matchingKeyColumns.Count > 0) {
					if(matchingKeyColumns.Count == 1)
						value = (!pColumn.IsNullable ? "Sql.Column.IntegerKeyColumn" : "Sql.Column.NIntegerKeyColumn") + "<" + matchingKeyColumns[0].PrimaryKeyTableName + ".Table>";
					else
						value = (!pColumn.IsNullable ? "Sql.Column.IntegerKeyColumn" : "Sql.Column.NIntegerKeyColumn") + "<" + matchingKeyColumns[0].PrimaryKeyTableName + "<??? Column Belongs to multipule foreign keys ???>.Table>";
				}
				else if(pColumn.IsPrimaryKey)
					value = (!pColumn.IsNullable ? "Sql.Column.IntegerKeyColumn" : "Sql.Column.NIntegerKeyColumn") + "<" + pTable.TableName + ".Table>";
				else
					value = !pColumn.IsNullable ? typeof(Sql.Column.IntegerColumn).ToString() : typeof(Sql.Column.NIntegerColumn).ToString();
			}
			else if(pColumn.DbType == System.Data.DbType.Int64) {

				if(matchingKeyColumns.Count > 0) {
					if(matchingKeyColumns.Count == 1)
						value = (!pColumn.IsNullable ? "Sql.Column.BigIntegerKeyColumn" : "Sql.Column.NBigIntegerKeyColumn") + "<" + matchingKeyColumns[0].PrimaryKeyTableName + ".Table>";
					else
						value = (!pColumn.IsNullable ? "Sql.Column.BigIntegerKeyColumn" : "Sql.Column.NBigIntegerKeyColumn") + "<" + matchingKeyColumns[0].PrimaryKeyTableName + "<??? Column Belongs to multipule foreign keys ???>.Table>";
				}
				else if(pColumn.IsPrimaryKey)
					value = (!pColumn.IsNullable ? "Sql.Column.BigIntegerKeyColumn" : "Sql.Column.NBigIntegerKeyColumn") + "<" + pTable.TableName + ".Table>";
				else
					value = !pColumn.IsNullable ? typeof(Sql.Column.BigIntegerColumn).ToString() : typeof(Sql.Column.NBigIntegerColumn).ToString();
			}
			else if(pColumn.DbType == System.Data.DbType.String) {

				if(matchingKeyColumns.Count > 0) {
					if(matchingKeyColumns.Count == 1)
						value = "Sql.Column.StringKeyColumn<" + matchingKeyColumns[0].PrimaryKeyTableName + ".Table>";
					else
						value = "Sql.Column.StringKeyColumn<" + matchingKeyColumns[0].PrimaryKeyTableName + "<??? Column Belongs to multipule foreign keys ???>.Table>";
				}
				else if(pColumn.IsPrimaryKey)
					value = "Sql.Column.StringKeyColumn<" + pTable.TableName + ".Table>";
				else
					value = typeof(Sql.Column.StringColumn).ToString();
			}
			else if(pColumn.DbType == System.Data.DbType.Binary) {
				value = !pColumn.IsNullable ? typeof(Sql.Column.BinaryColumn).ToString() : typeof(Sql.Column.NBinaryColumn).ToString();
			}
			else if(pColumn.DbType == System.Data.DbType.Byte) {
				value = !pColumn.IsNullable ? typeof(Sql.Column.ByteColumn).ToString() : typeof(Sql.Column.NByteColumn).ToString();
			}
			else if(pColumn.DbType == System.Data.DbType.Single) {
				value = !pColumn.IsNullable ? typeof(Sql.Column.FloatColumn).ToString() : typeof(Sql.Column.NFloatColumn).ToString();
			}
			else if(pColumn.DbType == System.Data.DbType.Double) {
				value = !pColumn.IsNullable ? typeof(Sql.Column.DoubleColumn).ToString() : typeof(Sql.Column.NDoubleColumn).ToString();
			}
			else
				value = "UNKNOWN_COLUMN_TYPE";

			return value;
		}

		public static string GenerateStoredProcedureCode(Logic.IStoredProcedureDetail pProc, string pColumnPrefix, bool pIncludeSchema) {

			string endl = Environment.NewLine;
			string tab = "\t";

			StringBuilder code = new StringBuilder();

			code.Append("using System;").Append(endl);
			code.Append("using System.Data;").Append(endl);
			code.Append("using System.Data.SqlClient;").Append(endl).Append(endl);

			code.Append("namespace Tables.").Append(pProc.Name).Append(" {").Append(endl);
			code.Append(endl);
			code.Append(tab).Append("public sealed class Proc : ").Append(typeof(Sql.AStoredProc).ToString()).Append(" {").Append(endl);
			code.Append(endl);
			code.Append(tab).Append(tab).Append("public static readonly Proc Instance = new Proc();").Append(endl);

			code.Append(endl);
			code.Append(tab).Append(tab).Append("public Proc() : base(DATABASE, \"").Append(pIncludeSchema && !string.IsNullOrEmpty(pProc.Schema) ? pProc.Schema + "." : string.Empty).Append(pProc.Name).Append("\", typeof(Row)) {").Append(endl);
			code.Append(endl);

			code.Append(tab).Append(tab).Append(tab).Append("//AddColumns(");
			code.Append(");").Append(endl);
			code.Append(tab).Append(tab).Append("}").Append(endl);
			code.Append(endl);

			code.Append(tab).Append(tab).Append("public Sql.IResult Execute(");

			for(int index = 0; index < pProc.Parameters.Count; index++) {

				Logic.ISpParameter param = pProc.Parameters[index];

				if(index > 0)
					code.Append(", ");

				if(param.Direction == System.Data.ParameterDirection.Output || param.Direction == System.Data.ParameterDirection.ReturnValue)
					code.Append("out ");

				code.Append(GetReturnType(param.ParamType, false)).Append(" ").Append(param.Name);
			}

			if(pProc.Parameters.Count > 0)
				code.Append(", ");

			code.Append("Sql.Transaction pTransaction) {").Append(endl).Append(endl);

			for(int index = 0; index < pProc.Parameters.Count; index++) {

				Logic.ISpParameter param = pProc.Parameters[index];

				code.Append(tab).Append(tab).Append(tab).Append("SqlParameter p").Append(index.ToString()).Append(" = new SqlParameter(\"").Append(param.Name).Append("\", SqlDbType.").Append(ConvertToSqlDbType(param.ParamType).ToString()).Append(");").Append(endl);

				code.Append(tab).Append(tab).Append(tab).Append("p").Append(index.ToString()).Append(".Direction = ParameterDirection.").Append(param.Direction.ToString()).Append(";").Append(endl);

				if(param.Direction == System.Data.ParameterDirection.Input || param.Direction == System.Data.ParameterDirection.InputOutput)
					code.Append(tab).Append(tab).Append(tab).Append("p").Append(index.ToString()).Append(".Value = ").Append(param.Name).Append(";").Append(endl);

				code.Append(endl);
			}

			code.Append(tab).Append(tab).Append(tab).Append("Sql.IResult result = ExecuteProcedure(pTransaction");

			for(int index = 0; index < pProc.Parameters.Count; index++)
				code.Append(", p").Append(index.ToString());

			code.Append(");").Append(endl).Append(endl);

			for(int index = 0; index < pProc.Parameters.Count; index++) {

				Logic.ISpParameter param = pProc.Parameters[index];

				if(param.Direction == System.Data.ParameterDirection.InputOutput || param.Direction == System.Data.ParameterDirection.Output || param.Direction == System.Data.ParameterDirection.ReturnValue)
					code.Append(tab).Append(tab).Append(tab).Append(param.Name).Append(" = (").Append(GetReturnType(param.ParamType, false)).Append(")").Append("p").Append(index.ToString()).Append(".Value;").Append(endl);
			}

			code.Append(tab).Append(tab).Append(tab).Append("return result;").Append(endl);
			code.Append(tab).Append(tab).Append("}").Append(endl).Append(endl);

			code.Append(tab).Append(tab).Append("public Row this[int pIndex, Sql.IResult pResult] {").Append(endl);
			code.Append(tab).Append(tab).Append(tab).Append("get { return (Row)pResult.GetRow(this, pIndex); }").Append(endl);
			code.Append(tab).Append(tab).Append("}").Append(endl);
			code.Append(tab).Append("}").Append(endl);

			code.Append(endl);

			//
			//	Generate row code
			//
			code.Append(tab).Append("public sealed class Row : ").Append(typeof(Sql.ARow).ToString()).Append(" {").Append(endl);
			code.Append(endl);
			code.Append(tab).Append(tab).Append("private new Proc Tbl {").Append(endl);
			code.Append(tab).Append(tab).Append(tab).Append("get { return (Proc)base.Tbl; }").Append(endl);
			code.Append(tab).Append(tab).Append("}").Append(endl);
			code.Append(endl);
			code.Append(tab).Append(tab).Append("public Row() : base(Proc.Instance) {").Append(endl);
			code.Append(tab).Append(tab).Append("}").Append(endl);

			code.Append(tab).Append("}").Append(endl);
			code.Append("}");

			return code.ToString();
		}

		private static SqlDbType ConvertToSqlDbType(System.Data.DbType pDbType) {

			if(pDbType == DbType.Int16)
				return SqlDbType.SmallInt;
			if(pDbType == DbType.Int32)
				return SqlDbType.Int;
			if(pDbType == DbType.Int64)
				return SqlDbType.BigInt;
			if(pDbType == DbType.String)
				return SqlDbType.VarChar;
			if(pDbType == DbType.Decimal)
				return SqlDbType.Decimal;
			if(pDbType == DbType.DateTime)
				return SqlDbType.DateTime;
			if(pDbType == DbType.DateTime2)
				return SqlDbType.DateTime2;
			if(pDbType == DbType.DateTimeOffset)
				return SqlDbType.DateTimeOffset;
			if(pDbType == DbType.Byte)
				return SqlDbType.TinyInt;
			if(pDbType == DbType.Double)
				return SqlDbType.Float;
			if(pDbType == DbType.Single)
				return SqlDbType.Real;

			return 0;
		}

		public static string GetReturnType(System.Data.DbType pDbType, bool pIsNullable) {

			string value;

			if(pDbType == System.Data.DbType.Boolean) {
				value = !pIsNullable ? "bool" : "bool?";
			}
			else if(pDbType == System.Data.DbType.DateTime) {
				value = !pIsNullable ? "DateTime" : "DateTime?";
			}
			else if(pDbType == System.Data.DbType.DateTime2) {
				value = !pIsNullable ? "DateTime" : "DateTime?";
			}
			else if(pDbType == System.Data.DbType.DateTimeOffset) {
				value = !pIsNullable ? "DateTimeOffset" : "DateTimeOffset?";
			}
			else if(pDbType == System.Data.DbType.Decimal) {
				value = !pIsNullable ? "decimal" : "decimal?";
			}
			else if(pDbType == System.Data.DbType.Guid) {
				value = !pIsNullable ? "Guid" : "Guid?";
			}
			else if(pDbType == System.Data.DbType.Int16) {
				value = !pIsNullable ? "short" : "short?";
			}
			else if(pDbType == System.Data.DbType.Int32) {
				value = !pIsNullable ? "int" : "int?";
			}
			else if(pDbType == System.Data.DbType.Int64) {
				value = !pIsNullable ? "long" : "long?";
			}
			else if(pDbType == System.Data.DbType.String) {
				value = "string";
			}
			else if(pDbType == System.Data.DbType.Binary) {
				value = !pIsNullable ? "byte[]" : "byte[]";
			}
			else if(pDbType == System.Data.DbType.Byte) {
				value = !pIsNullable ? "byte" : "byte?";
			}
			else if(pDbType == System.Data.DbType.Single) {
				value = !pIsNullable ? "float" : "float?";
			}
			else if(pDbType == System.Data.DbType.Double) {
				value = !pIsNullable ? "double" : "double?";
			}
			else
				value = "UNKNOWN_COLUMN_TYPE";

			return value;
		}
	}
}