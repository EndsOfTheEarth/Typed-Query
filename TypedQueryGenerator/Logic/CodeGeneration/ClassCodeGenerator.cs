
/*
 * 
 * Copyright (C) 2009-2020 JFo.nz
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 **/

using System;
using TypedQuery.Logic;

namespace TypedQueryGenerator.Logic.CodeGeneration {
    
    public class ClassCodeGenerator {

        public string Generate(ITableDetails pTableDetails, string pNamespace, string pColumnPrefix, bool pRemoveUnderscores, bool pGenerateKeyTypes) {

            if(string.IsNullOrEmpty(pNamespace)) {
                pNamespace = "Logic";
            }

            string className = NameFormatter.Format(pTableDetails.TableName);

            CodeFile codeFile = new CodeFile("    ");

            codeFile.Append("using System;").EndLine();

            if(pGenerateKeyTypes) {
                codeFile.Append("using Sql.Types;").EndLine();
            }
            codeFile.Append("using Sql.Column;").EndLine();
            codeFile.EndLine();

            codeFile.Append("namespace ").Append(pNamespace).Append(".").Append(pTableDetails.TableName).Append(" {").EndLine();
            codeFile.EndLine();

            codeFile.Indent(1).Append("public class ").Append("Info").Append(" {").EndLine();
            codeFile.EndLine();

            for(int columnIndex = 0; columnIndex < pTableDetails.Columns.Count; columnIndex++) {

                IColumn column = pTableDetails.Columns[columnIndex];

                codeFile.Indent(2).Append("public ").Append(ReturnType.GetReturnType(column.DbType, column.IsNullable, column, pTableDetails, pGenerateKeyTypes)).Append(" ").Append(NameFormatter.Format(ColumnName.GetColumnName(column, pColumnPrefix, pRemoveUnderscores))).Append(" { get;");

                if(!column.IsAutoGenerated && !pTableDetails.IsView) {
                    codeFile.Append(" private set; }");
                }
                else {
                    codeFile.Append(" private set; }");
                }
                codeFile.EndLine();
            }

            codeFile.EndLine();

            codeFile.Indent(2).Append("public ").Append("Info").Append("(Row pRow) {").EndLine();
            codeFile.EndLine();

            for(int columnIndex = 0; columnIndex < pTableDetails.Columns.Count; columnIndex++) {

                IColumn column = pTableDetails.Columns[columnIndex];
                string fieldName = NameFormatter.Format(ColumnName.GetColumnName(column, pColumnPrefix, pRemoveUnderscores));

                codeFile.Indent(3).Append(fieldName).Append(" = pRow.").Append(fieldName).Append(";").EndLine();
            }

            codeFile.Indent(2).Append("}").EndLine();

            if(!pTableDetails.IsView) {

                codeFile.Indent(2).Append("public void CopyToRow(Row pRow) {").EndLine();
                codeFile.EndLine();

                for(int columnIndex = 0; columnIndex < pTableDetails.Columns.Count; columnIndex++) {

                    IColumn column = pTableDetails.Columns[columnIndex];
                    string fieldName = NameFormatter.Format(ColumnName.GetColumnName(column, pColumnPrefix, pRemoveUnderscores));

                    if(!column.IsAutoGenerated) {
                        codeFile.Indent(3).Append("pRow.").Append(fieldName).Append(" = ").Append(fieldName).Append(";").EndLine();
                    }
                }

                codeFile.Indent(2).Append("}").EndLine();

                codeFile.EndLine();
                codeFile.Indent(2).Append("public void SetValues(");

                for(int columnIndex = 0, paramCount = 0; columnIndex < pTableDetails.Columns.Count; columnIndex++) {

                    IColumn column = pTableDetails.Columns[columnIndex];
                    string fieldName = NameFormatter.Format(ColumnName.GetColumnName(column, pColumnPrefix, pRemoveUnderscores));

                    if(!column.IsAutoGenerated) {

                        if(paramCount > 0) {
                            codeFile.Append(", ");
                        }
                        codeFile.Append(ReturnType.GetReturnType(column.DbType, column.IsNullable, column, pTableDetails, pGenerateKeyTypes)).Append(" p").Append(fieldName);
                        paramCount++;
                    }
                }
                codeFile.Append(") {").EndLine();

                for(int columnIndex = 0; columnIndex < pTableDetails.Columns.Count; columnIndex++) {

                    IColumn column = pTableDetails.Columns[columnIndex];
                    string fieldName = NameFormatter.Format(ColumnName.GetColumnName(column, pColumnPrefix, pRemoveUnderscores));

                    if(!column.IsAutoGenerated) {
                        codeFile.Indent(3).Append(fieldName).Append(" = p").Append(fieldName).Append(";").EndLine();
                    }
                }
                codeFile.Indent(2).Append("}").EndLine();
            }

            codeFile.Indent(1).Append("}").EndLine();
            codeFile.Append("}");

            return codeFile.ToString();
        }
    }
}